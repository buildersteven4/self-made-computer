-- Instruction layout
	[ opcode:6 | address A:5 | address B:5 | #:16 ]
	opcode: Determines what operation to execute.
	A: output and secondary input. The operation will be 8 or 16-bit corresponding to A.
	B: primary input
	#: The immidiate number, used in instructions that have mode A or B set to 1.

-- address A:
(8-bit registers)
	0x00 = al
	0x01 = ah
	0x02 = bl
	0x03 = bh
	0x04 = cl
	0x05 = ch
	0x06 = dl
	0x07 = dh
(16-bit registers)
	0x08 = ax
	0x09 = bx
	0x0A = cx
	0x0B = dx
	0x0C = ex
	0x0D = fx
	0x0E = pc
	0x0F = sp
(8-bit memory from RAM)
	0x10 = [ax+#]
	0x11 = [bx+#]
	0x12 = [cx+#]
	0x13 = [dx+#]
	0x14 = [fx+#]
	0x15 = [pc+#]
	0x16 = [sp+#]
	0x17 = [#]
(16-bit memory from RAM)
	0x18 = @[ax+#]
	0x19 = @[bx+#]
	0x1A = @[cx+#]
	0x1B = @[dx+#]
	0x1C = @[fx+#]
	0x1D = @[pc+#]
	0x1E = @[sp+#]
	0x1F = @[#]

-- Addressing modes B:
(8-bit registers)
	0x00 = al
	0x01 = ah
	0x02 = bl
	0x03 = bh
	0x04 = cl
	0x05 = ch
	0x06 = dl
	0x07 = dh
(16-bit registers)
	0x08 = ax
	0x09 = bx
	0x0A = cx
	0x0B = dx
	0x0C = ex
	0x0D = fx
	0x0E = pc
	0x0F = sp
(memory from RAM)
	0x10 = [ax+#]
	0x11 = [bx+#]
	0x12 = [cx+#]
	0x13 = [dx+#]
	0x14 = [fx+#]
	0x15 = [pc+#]
	0x16 = [sp+#]
	0x17 = [#]
(immidiate offset with register)
	0x18 = ax+#
	0x19 = bx+#
	0x1A = cx+#
	0x1B = dx+#
	0x1C = fx+#
	0x1D = pc+#
	0x1E = sp+#
	0x1F = #

-- Registers
(general purpose registers)
	0x0 = al (8-bit) : The lower byte of ax
	0x1 = ah (8-bit) : The higher byte of ax
	0x2 = bl (8-bit) : The lower byte of bx
	0x3 = bh (8-bit) : The higher byte of bx
	0x4 = cl (8-bit) : The lower byte of cx
	0x5 = ch (8-bit) : The higher byte of cx
	0x6 = dl (8-bit) : The lower byte of dx
	0x7 = dh (8-bit) : The higher byte of dx
	0x8 = ax (16-bit):
	0x9 = bx (16-bit):
	0xA = cx (16-bit):
	0xB = dx (16-bit):
	0xC = ex (16-bit):
(special purpose registers)
	0xD = fx (16-bit): Meant for very temporary data, but that is purely a suggestion
	0xE = sp (16-bit): Meant for the adress of the end of the stack, but that is purely a suggestion
	0xF = pc (16-bit): Holds the adress of the next instruction to run

-- Flags
(status flags)
	ZF : zero flag
	SF : sign flag
	PF : parity flag
	OF : overflow flag
	CF : carry & borrow flag
(control flags)
	IF : enable interrupt flag

-- Conditions
	0x0 = Z		   : zero flag is set (number is equal to zero)
	0x1 = NZ	   : zero flag is clear (number is not equal to zero)
	0x2 = S        : sign flag is set (number is positive or zero)
	0x3 = NS       : sign flag is clear (number is negative)
	0x4 = P		   : parity flag is set (number is even)
	0x5 = NP	   : parity flag is clear (number is uneven)
	0x6 = O		   : overflow flag is set (the last operation had an overflow)
	0x7 = NO	   : overflow flag is clear (the last operation didn't have an overflow)
	0x8 = C		   : carry flag is set (the last operation had a carry or borrow)
	0x9 = NC	   : carry flag is clear (the last operation didn't have a carry or borrow)
	0xC = I		   : enable interrupt flag is set (interrupts will fire)
	0xD = NI	   : enable interrupt flag is clear (interrupts won't fire)
	
	SLE
	SS
	SL
	SSE
	US
	ULE
	USE
	UL
	
	0xE = A		   : always
	0xF = NA	   : never

	Z
	S
	P
	O
	
	C
	C or Z
	(S xand O) nor Z
	S xor O
	
	A

-- internal registers
(8-bit internal registers)
	0x00 = reserved
	0x01 = reserved
	0x02 = reserved
	0x03 = reserved
	0x04 = reserved
	0x05 = reserved
	0x06 = reserved
	0x07 = reserved
(16-bit internal registers)
	0x08 = bpc
	0x09 = bsf
	0x0A = ipc
	0x0B = is
	0x0C = reserved
	0x0D = reserved
	0x0E = reserved
	0x0F = reserved
(8-bit internal registers)
	0x10 = undefined
	0x11 = undefined
	0x12 = undefined
	0x13 = undefined
	0x14 = undefined
	0x15 = undefined
	0x16 = undefined
	0x17 = undefined
(16-bit internal registers)
	0x18 = undefined
	0x19 = undefined
	0x1A = undefined
	0x1B = undefined
	0x1C = undefined
	0x1D = undefined
	0x1E = undefined
	0x1F = undefined

-- OPcodes
(move opcodes)
	0x00-0x0F = MOVcond a b: moves value from B to A if the condition (determined by the first 4 bits of the opcode) is met

(special opcodes)
	0x10 = MOV a b: moves value from B to A
	0x11 = 
	0x12 = WRI _ b: (WRite Interrupt enabled) writes the least significant bit of b to IF (enables/disables interrupts)
	0x13 = 
	0x14 = ISTR a b: (Internal SToRe) writes b to internal register a 
	0x15 = ILD a b: (Internal LoaD) writes internal register b to a
	0x16 = OUT a b: (OUTput) write b to output register a
	0x17 = IN a b: (INput) requests input from pheripiral b and writes the input to a (does not yield, if no input is recieved in time the input will default to zero)

	0x18 = BACK _ _: (BACKup) backups all the registers
	0x19 = FRET _ _: (Full REsTore) restores all the registers and marks that the there is no interrupt being handled
	0x1A = PRET _ _: (Partial REsTore) restores the pc, flag and segment registers and marks that the there is no interrupt being handled
	0x1B = FJMP _ _: (Far JuMP) restores the pc, flag and segment registers
	0x1C = HLT _ _: (HaLT) halts the CPU untill an external interrupt is triggered
	0x1D = NOP _ _: (No OPeration) does nothing (actually a move never statement)
	0x1E = CMP a b : (CoMPare)
	0x1F = TEST a b : (TEST)

(ALU opcodes)
	0x20 = OR a b
	0x21 = OR !a b
	0x22 = OR a !b
	0x23 = OR !a !b
	0x24 = AND a b
	0x25 = AND !a b
	0x26 = AND a !b
	0x27 = AND !a !b

	0x28 = XOR a b
	0x29 = XOR !a b
	0x2A = XOR a !b (duplicate)
	0x2B = XOR !a !b (useless)
	0x2C = ADD a b
	0x2D = ADD !a b
	0x2E = ADD a !b
	0x2F = ADD !a !b (useless)

	0x30 = ADD1 a b
	0x31 = ADD1 !a b
	0x32 = ADD1 a !b
	0x33 = ADD1 !a !b (useless)
	0x34 = ADDC a b
	0x35 = ADDC !a b
	0x36 = ADDC a !b
	0x37 = ADDC !a !b (useless)

	0x38 = SHL a b
	0x39 = SHL1 a b
	0x3A = RCL a b
	0x3B = ROL a b
	0x3C = SHR a b
	0x3D = SHR1 a b
	0x3E = RCR a b
	0x3F = ROR a b

-- pseudo instructions
	NOT a    = OR !a 0x0
	XAND a b = XOR a !b
	NOR a b  = AND !a !b
	NAND a b = OR !a !b
	SUB a b  = ADD a !b
	SUB1 a b = ADD1 a !b
	SUBB a b = ADDC a !b
	NEG a    = ADD !a 0x0
	PUSH a   = MOV [ss] a 
	           ADD ss 0x2
	POP a    = SUB ss 0x2 
	           MOV a [ss]
	CALL a   = MOV fx cs+0x
	           MOV [ss] fx 
			   ADD1 ss 0x2
			   MOV cs a
	RET      = SUB ss 0x2 
	           MOV cs [ss]

-- micro instructions
carry: Effects the output of the operations 0x5, 0x6 and 0x7. "carry" will be inverted if either "not A" or "not B" is set.
not A: Inverts bits of input A.
not B: Inverts bits of input B.
operation: Determines what operation's answer to output.
	0x0: pass A
	0x1: pass B
	0x2: shift left B
	0x3: shift right B
	0x4: or
	0x5: and
	0x6: exclusive or
	0x7: add
test: will update status flags

-- prossesses:
	interrupt:
		backup
		CS = intCS
		DS = intDS
		PC = intPC
	iret:
		restore
	context save: 
		
